services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: rep2prompt
      POSTGRES_USER: rep2prompt
      POSTGRES_PASSWORD: rep2prompt
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rep2prompt -d rep2prompt"]
      interval: 5s
      timeout: 3s
      retries: 30

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy

  migrator:
    image: migrate/migrate:4
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/migrations:/migrations:ro
    command:
      - "-path=/migrations"
      - "-database=postgres://rep2prompt:rep2prompt@postgres:5432/rep2prompt?sslmode=disable"
      - "up"
    restart: "no"

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"
    # environment:
    #   REDIS_PASSWORD: ""   # если нужен пароль — раскомментируй и добавь в конфиги

  asynqmon:
    image: hibiken/asynqmon:latest
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      REDIS_ADDR: redis:6379
      # REDIS_PASSWORD: ""   # если включишь пароль
    depends_on:
      - redis

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile.api
    environment:
      PORT: 8080
      ENV: dev
      REQUEST_TIMEOUT: 15s
      DATABASE_URL: postgres://rep2prompt:rep2prompt@postgres:5432/rep2prompt?sslmode=disable
      REDIS_ADDR: redis:6379
      ARTIFACTS_DIR: /data/artifacts
      ARTIFACTS_BACKEND: s3
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_BUCKET: rep2prompt-artifacts
      S3_ACCESS_KEY: rep2prompt
      S3_SECRET_KEY: rep2prompt_secret_123
      S3_USE_SSL: "false"
    volumes:
      - artifactsdata:/data/artifacts
    depends_on:
      minio-mc:
        condition: service_completed_successfully
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile.worker
    environment:
      ARTIFACTS_BACKEND: s3
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_BUCKET: rep2prompt-artifacts
      S3_ACCESS_KEY: rep2prompt
      S3_SECRET_KEY: rep2prompt_secret_123
      S3_USE_SSL: "false"
      DATABASE_URL: postgres://rep2prompt:rep2prompt@postgres:5432/rep2prompt?sslmode=disable
      REDIS_ADDR: redis:6379
      WORKER_CONCURRENCY: "4"
      WORKER_QUEUES: "high=6,default=3,low=1"
      ARTIFACTS_DIR: /data/artifacts
    volumes:
      - artifactsdata:/data/artifacts
    depends_on:
      minio-mc:
        condition: service_completed_successfully
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  minio:
    image: minio/minio:RELEASE.2024-12-18T13-15-44Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: rep2prompt
      MINIO_ROOT_PASSWORD: rep2prompt_secret_123
    ports:
      - "19000:9000"   # S3 endpoint
      - "19001:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider http://127.0.0.1:9000/minio/health/ready || (command -v curl >/dev/null 2>&1 && curl -fsS http://127.0.0.1:9000/minio/health/ready)",
        ]
      interval: 5s
      timeout: 3s
      retries: 30

  minio-mc:
    image: minio/mc:RELEASE.2024-12-18T13-15-44Z
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh","-c"]
    # Создаём alias, бакет, политику чтения и lifecycle для TTL
    command: |
      set -e
      mc alias set localminio http://minio:9000 rep2prompt rep2prompt_secret_123
      mc mb -p localminio/rep2prompt-artifacts || true
      # public read для GET по presigned (не обязательно, но не мешает)
      mc anonymous set download localminio/rep2prompt-artifacts
      # lifecycle: удалить объекты через 30 дней (пример)
      cat > /tmp/lifecycle.json <<'JSON'
      {
        "Rules": [
          {
            "ID": "expire-after-30d",
            "Status": "Enabled",
            "Expiration": { "Days": 30 },
            "Filter": { "Prefix": "" }
          }
        ]
      }
      JSON
      mc ilm import localminio/rep2prompt-artifacts < /tmp/lifecycle.json
      echo "MinIO bucket ready."
    restart: "no"

volumes:
  pgdata: {}
  artifactsdata:                              # <<< объявляем том
