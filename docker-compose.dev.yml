services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: rep2prompt
      POSTGRES_USER: rep2prompt
      POSTGRES_PASSWORD: rep2prompt
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rep2prompt -d rep2prompt"]
      interval: 5s
      timeout: 3s
      retries: 30

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy

  migrator:
    image: migrate/migrate:4
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend/migrations:/migrations:ro
    command:
      - "-path=/migrations"
      - "-database=postgres://rep2prompt:rep2prompt@postgres:5432/rep2prompt?sslmode=disable"
      - "up"
    restart: "no"

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"
    # environment:
    #   REDIS_PASSWORD: ""   # если нужен пароль — раскомментируй и добавь в конфиги

  asynqmon:
    image: hibiken/asynqmon:latest
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      REDIS_ADDR: redis:6379
      # REDIS_PASSWORD: ""   # если включишь пароль
    depends_on:
      - redis

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile.api
    environment:
      PORT: 8080
      ENV: dev
      REQUEST_TIMEOUT: 15s
      DATABASE_URL: postgres://rep2prompt:rep2prompt@postgres:5432/rep2prompt?sslmode=disable
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ""
      ARTIFACTS_DIR: /data/artifacts
      ARTIFACTS_BACKEND: s3
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_BUCKET: rep2prompt-artifacts
      S3_ACCESS_KEY: rep2prompt
      S3_SECRET_KEY: rep2prompt_secret_123
      S3_USE_SSL: "false"
    volumes:
      - artifactsdata:/data/artifacts
    depends_on:
      minio-mc:
        condition: service_completed_successfully
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"

  worker:
    build:
      context: .
      dockerfile: backend/Dockerfile.worker
    environment:
      ARTIFACTS_BACKEND: s3
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_BUCKET: rep2prompt-artifacts
      S3_ACCESS_KEY: rep2prompt
      S3_SECRET_KEY: rep2prompt_secret_123
      S3_USE_SSL: "false"
      DATABASE_URL: postgres://rep2prompt:rep2prompt@postgres:5432/rep2prompt?sslmode=disable
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ""
      WORKER_CONCURRENCY: "4"
      WORKER_QUEUES: "high=6,default=3,low=1"
      ARTIFACTS_DIR: /data/artifacts
    volumes:
      - artifactsdata:/data/artifacts
    depends_on:
      minio-mc:
        condition: service_completed_successfully
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: rep2prompt
      MINIO_ROOT_PASSWORD: rep2prompt_secret_123
    ports:
      - "19000:9000"   # S3 endpoint
      - "19001:9001"   # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider http://127.0.0.1:9000/minio/health/ready || (command -v curl >/dev/null 2>&1 && curl -fsS http://127.0.0.1:9000/minio/health/ready)",
        ]
      interval: 5s
      timeout: 3s
      retries: 30

  minio-mc:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: ["/bin/sh","-c"]
    # Создаём alias, бакет, политику чтения и lifecycle для TTL
    command: |
      set -e
      mc alias set localminio http://minio:9000 rep2prompt rep2prompt_secret_123
      mc mb -p localminio/rep2prompt-artifacts || true
      # public read для GET по presigned (не обязательно, но не мешает)
      mc anonymous set download localminio/rep2prompt-artifacts
      # lifecycle: удалить объекты через 30 дней (пример)
      cat > /tmp/lifecycle.json <<'JSON'
      {
        "Rules": [
          {
            "ID": "expire-after-30d",
            "Status": "Enabled",
            "Expiration": { "Days": 30 },
            "Filter": { "Prefix": "" }
          }
        ]
      }
      JSON
      mc ilm import localminio/rep2prompt-artifacts < /tmp/lifecycle.json
      echo "MinIO bucket ready."
    restart: "no"

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: prometheus
    volumes:
      - ./infra/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - api
      - worker
      - redis
      - postgres
    networks: [default]

  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks: [default]

  redis_exporter:
    image: oliver006/redis_exporter:v1.62.0
    command: ["--redis.addr=redis://redis:6379"]
    ports: ["9121:9121"]
    depends_on: [redis]
    networks: [default]

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      - DATA_SOURCE_NAME=postgresql://rep2prompt:rep2prompt@postgres:5432/rep2prompt?sslmode=disable
    ports: ["9187:9187"]
    depends_on: [postgres]
    networks: [default]

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.49.1
    ports: ["8084:8080"]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks: [default]

  loki:
    image: grafana/loki:2.9.8
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./infra/observability/loki/local-config.yaml:/etc/loki/local-config.yaml:ro
    ports: ["3100:3100"]
    networks: [default]

  promtail:
    image: grafana/promtail:2.9.8
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./infra/observability/promtail/config.yml:/etc/promtail/config.yml:ro
    depends_on: [loki]
    networks: [default]

volumes:
  pgdata: {}
  minio_data: {}
  artifactsdata: {}
  grafana_data: