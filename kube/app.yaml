apiVersion: v1
kind: Namespace
metadata:
  name: rep2prompt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: rep2prompt
spec:
  replicas: 1
  selector: { matchLabels: { app: api } }
  template:
    metadata:
      labels: { app: api }
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: api
          image: ghcr.io/you/rep2prompt-api:latest
          ports: [{ containerPort: 8080 }]
          env:
            - name: DATABASE_URL
              valueFrom: { secretKeyRef: { name: app-secrets, key: DATABASE_URL } }
            - name: REDIS_ADDR
              value: "redis:6379"
            - name: S3_ENDPOINT
              value: "minio.rep2prompt.svc.cluster.local:9000"
          readinessProbe:
            httpGet: { path: /healthz, port: 8080 }
            initialDelaySeconds: 5
          livenessProbe:
            httpGet: { path: /healthz, port: 8080 }
            initialDelaySeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: rep2prompt
spec:
  selector: { app: api }
  ports:
    - port: 80
      targetPort: 8080
      name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: worker
  namespace: rep2prompt
spec:
  replicas: 2
  selector: { matchLabels: { app: worker } }
  template:
    metadata:
      labels: { app: worker }
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: worker
          image: ghcr.io/you/rep2prompt-worker:latest
          ports: [{ containerPort: 8080 }]
          env:
            - name: REDIS_ADDR
              value: "redis:6379"
            - name: DATABASE_URL
              valueFrom: { secretKeyRef: { name: app-secrets, key: DATABASE_URL } }
          readinessProbe:
            httpGet: { path: /healthz, port: 8080 }
            initialDelaySeconds: 5
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: worker-hpa
  namespace: rep2prompt
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: worker
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# Ingress (пример с nginx ingress)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: api
  namespace: rep2prompt
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: api.localtest.me
      http:
        paths:
          - path: /
            pathType: Prefix
            backend: { service: { name: api, port: { number: 80 } } }
